package py.com.excelsis.sicca.entity;


import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.Vector;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.validator.Length;
import org.jboss.seam.Component;
import org.jboss.seam.annotations.In;
import org.jboss.seam.contexts.Contexts;
import org.jboss.seam.security.Credentials;
import org.jboss.seam.security.Identity;

import py.com.excelsis.sicca.entity.RequisitoMinimoCpt.EscalaReqMinComparator;
import py.com.excelsis.sicca.util.EXCProperties;
import py.com.excelsis.sicca.util.EntityBase;
import py.com.excelsis.sicca.util.SICCASessionParameters;

/**
 * CondicionTrabajo generated by Generality
 */
@Entity
@Table(name = "condicion_trabajo", schema = "planificacion")
public class CondicionTrabajo extends EntityBase {
	/**
	 * 
	 */
	private static final long serialVersionUID = 7755170624889430029L;
	private Long idCondicionTrabajo;
	private String descripcion;
	private Integer orden;
	private Boolean activo;
	private String usuAlta;
	private Date fechaAlta;
	private String usuMod;
	private Date fechaMod;
	private List<EscalaCondTrab> escalaCondTrabs = new ArrayList<EscalaCondTrab>(0);
	private List<DetCondicionTrabajo> detCondicionTrabajos = new ArrayList<DetCondicionTrabajo>(
			0);

	public CondicionTrabajo() {
	}

	public CondicionTrabajo(Long idCondicionTrabajo, String descripcion,
			Integer orden, Boolean activo, String usuAlta, Date fechaAlta) {
		this.idCondicionTrabajo = idCondicionTrabajo;
		this.descripcion = descripcion;
		this.orden = orden;
		this.activo = activo;
		this.usuAlta = usuAlta;
		this.fechaAlta = fechaAlta;
	}

	public CondicionTrabajo(Long idCondicionTrabajo, String descripcion,
			Integer orden, Boolean activo, String usuAlta, Date fechaAlta,
			String usuMod, Date fechaMod, List<EscalaCondTrab> escalaCondTrabs,
			List<DetCondicionTrabajo> detCondicionTrabajos) {
		this.idCondicionTrabajo = idCondicionTrabajo;
		this.descripcion = descripcion;
		this.orden = orden;
		this.activo = activo;
		this.usuAlta = usuAlta;
		this.fechaAlta = fechaAlta;
		this.usuMod = usuMod;
		this.fechaMod = fechaMod;
		this.escalaCondTrabs = escalaCondTrabs;
		this.detCondicionTrabajos = detCondicionTrabajos;
	}
	@Id
	@GeneratedValue(generator="CONDICION_TRABAJO_GENERATOR")
	@SequenceGenerator(name="CONDICION_TRABAJO_GENERATOR",sequenceName="planificacion.condicion_trabajo_id_condicion_trabajo_seq")

	@Column(name = "id_condicion_trabajo")
	public Long getIdCondicionTrabajo() {
		return this.idCondicionTrabajo;
	}

	public void setIdCondicionTrabajo(Long idCondicionTrabajo) {
		this.idCondicionTrabajo = idCondicionTrabajo;
	}
	

	@Column(name = "descripcion")
	public String getDescripcion() {
		return this.descripcion;
	}

	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}
	

	@Column(name = "orden")
	public Integer getOrden() {
		return this.orden;
	}

	public void setOrden(Integer orden) {
		this.orden = orden;
	}
	

	@Column(name = "activo")
	public Boolean getActivo() {
		return this.activo;
	}

	public void setActivo(Boolean activo) {
		this.activo = activo;
	}
	

	@Column(name = "usu_alta")
	public String getUsuAlta() {
		return this.usuAlta;
	}

	public void setUsuAlta(String usuAlta) {
		this.usuAlta = usuAlta;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fecha_alta")
	public Date getFechaAlta() {
		return this.fechaAlta;
	}

	public void setFechaAlta(Date fechaAlta) {
		this.fechaAlta = fechaAlta;
	}
	

	@Column(name = "usu_mod")
	public String getUsuMod() {
		return this.usuMod;
	}

	public void setUsuMod(String usuMod) {
		this.usuMod = usuMod;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fecha_mod")
	public Date getFechaMod() {
		return this.fechaMod;
	}

	public void setFechaMod(Date fechaMod) {
		this.fechaMod = fechaMod;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "condicionTrabajo")
	public List<EscalaCondTrab> getEscalaCondTrabs() {
		return this.escalaCondTrabs;
	}

	public void setEscalaCondTrabs(List<EscalaCondTrab> escalaCondTrabs) {
		this.escalaCondTrabs = escalaCondTrabs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "condicionTrabajo")
	public List<DetCondicionTrabajo> getDetCondicionTrabajos() {
		return this.detCondicionTrabajos;
	}

	public void setDetCondicionTrabajos(
			List<DetCondicionTrabajo> detCondicionTrabajos) {
		this.detCondicionTrabajos = detCondicionTrabajos;
	}
	
	@Transient
	public Long getId() {
		return idCondicionTrabajo;
	}

	/**
	 * 
	 * @return properties
	 */
	@Transient
	public Properties getProperties() {
		Properties properties = new EXCProperties();
		properties.put(SICCASessionParameters.CONDICION_TRABAJO_ID, getId());
		properties.put(SICCASessionParameters.CONDICION_TRABAJO_DESCRIPCION,
				descripcion);

		return properties;
	}

	/**
	 * 
	 * @param properties
	 */
	public void setProperties(Properties properties) {
		// TODO Auto-generated method stub

	}
	
	
	

	@Transient
	public List<EscalaCondTrab> getEscalaCondTrabsActivos() {
		if(this.escalaCondTrabs != null){
			List<EscalaCondTrab> lista = new ArrayList<EscalaCondTrab>();
			for (EscalaCondTrab escalaCondTrab : escalaCondTrabs){
				if (escalaCondTrab.getActivo())
					lista.add(escalaCondTrab);
			}
			this.escalaCondTrabs = lista;
			
			Collections.sort(this.escalaCondTrabs, new EscalaCondTrabComparator());
		}
		return this.escalaCondTrabs;
	}
	

	public class EscalaCondTrabComparator implements Comparator<EscalaCondTrab>{
		public int compare(EscalaCondTrab o1, EscalaCondTrab o2) {
			if(o1.getDesde().compareTo(o2.getDesde()) == 0) {           
				return o1.getHasta().compareTo(o2.getHasta());
		    } else {
		    	return o1.getDesde().compareTo(o2.getDesde());
		    }       
	    }
	}

}
