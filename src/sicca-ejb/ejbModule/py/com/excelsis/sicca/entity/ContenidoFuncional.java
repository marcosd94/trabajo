package py.com.excelsis.sicca.entity;


import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.Vector;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.validator.Length;
import org.jboss.seam.Component;
import org.jboss.seam.annotations.In;
import org.jboss.seam.contexts.Contexts;
import org.jboss.seam.security.Credentials;
import org.jboss.seam.security.Identity;
import py.com.excelsis.sicca.util.EXCProperties;
import py.com.excelsis.sicca.util.EntityBase;
import py.com.excelsis.sicca.util.SICCASessionParameters;

/**
 * ContenidoFuncional generated by Generality
 */
@Entity
@Table(name = "contenido_funcional", schema = "planificacion")
public class ContenidoFuncional extends EntityBase {
	private Long idContenidoFuncional;
	private String descripcion;
	private Boolean activo;
	private Integer orden;
	private String usuAlta;
	private String usuMod;
	private Date fechaMod;
	private Date fechaAlta;
	private List<ValorNivelOrg> valorNivelOrgs = new ArrayList<ValorNivelOrg>(0);
	

	public ContenidoFuncional() {
	}

	public ContenidoFuncional(Long idContenidoFuncional) {
		this.idContenidoFuncional = idContenidoFuncional;
	}

	@Id
	@GeneratedValue(generator="CONTENIDO_FUNCIONAL_GENERATOR")
	@SequenceGenerator(name="CONTENIDO_FUNCIONAL_GENERATOR",sequenceName="planificacion.contenido_funcional_id_contenido_funcional_seq")

	@Column(name = "id_contenido_funcional")
	public Long getIdContenidoFuncional() {
		return this.idContenidoFuncional;
	}

	public void setIdContenidoFuncional(Long idContenidoFuncional) {
		this.idContenidoFuncional = idContenidoFuncional;
	}
	

	@Column(name = "descripcion")
	public String getDescripcion() {
		return this.descripcion;
	}

	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}
	

	@Column(name = "activo")
	public Boolean getActivo() {
		return this.activo;
	}

	public void setActivo(Boolean activo) {
		this.activo = activo;
	}
	

	@Column(name = "orden")
	public Integer getOrden() {
		return this.orden;
	}

	public void setOrden(Integer orden) {
		this.orden = orden;
	}
	

	@Column(name = "usu_alta")
	public String getUsuAlta() {
		return this.usuAlta;
	}

	public void setUsuAlta(String usuAlta) {
		this.usuAlta = usuAlta;
	}
	

	@Column(name = "usu_mod")
	public String getUsuMod() {
		return this.usuMod;
	}

	public void setUsuMod(String usuMod) {
		this.usuMod = usuMod;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fecha_mod")
	public Date getFechaMod() {
		return this.fechaMod;
	}

	public void setFechaMod(Date fechaMod) {
		this.fechaMod = fechaMod;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fecha_alta")
	public Date getFechaAlta() {
		return this.fechaAlta;
	}

	public void setFechaAlta(Date fechaAlta) {
		this.fechaAlta = fechaAlta;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contenidoFuncional")
	public List<ValorNivelOrg> getValorNivelOrgs() {
		return valorNivelOrgs;
	}

	public void setValorNivelOrgs(List<ValorNivelOrg> valorNivelOrgs) {
		this.valorNivelOrgs = valorNivelOrgs;
	}


	
	@Transient
	public Long getId() {
		return idContenidoFuncional;
	}

	
	

	/**
	 * 
	 * @return properties
	 */
	@Transient
	public Properties getProperties() {
		Properties properties = new EXCProperties();
		properties.put(SICCASessionParameters.CONDICION_SEGUR_ID, getId());
		properties.put(SICCASessionParameters.CONDICION_SEGUR_DESCRIPCION,
				descripcion);

		return properties;
	}

	/**
	 * 
	 * @param properties
	 */
	public void setProperties(Properties properties) {
		// TODO Auto-generated method stub

	}
	
	
	
	@Transient
	public List<ValorNivelOrg> getValorNivelOrgActivos() {
		if(this.valorNivelOrgs != null){
			List<ValorNivelOrg> lista = new ArrayList<ValorNivelOrg>();
			for (ValorNivelOrg valorNivelOrg : valorNivelOrgs){
				if (valorNivelOrg.getActivo())
					lista.add(valorNivelOrg);
			}
			this.valorNivelOrgs = lista;
			
			Collections.sort(this.valorNivelOrgs, new ValorNivelOrgComparator());
		}
		return this.valorNivelOrgs;
	}
	

	public class ValorNivelOrgComparator implements Comparator<ValorNivelOrg>{
		public int compare(ValorNivelOrg o1, ValorNivelOrg o2) {
			if(o1.getDesde().compareTo(o2.getDesde()) == 0) {           
				return o1.getHasta().compareTo(o2.getHasta());
		    } else {
		    	return o1.getDesde().compareTo(o2.getDesde());
		    }       
	    }
	}
}
